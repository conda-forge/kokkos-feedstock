{% set name = "kokkos" %}
{% set version = "4.3.00" %}
{% set so_version = "4.3.0" %}

{% set cuda_major = environ.get("cuda_compiler_version", "0.0").split(".")[0]|int %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/kokkos/kokkos/archive/refs/tags/{{ version }}.tar.gz
  sha256: 53cf30d3b44dade51d48efefdaee7a6cf109a091b702a443a2eda63992e5fe0d
  patches:
    - msvc.patch  # [win]

build:
  # Upstream does not build shared libs for Windows correctly
  skip: true  # [win]
  number: 0
  run_exports:
    - {{ pin_subpackage('kokkos') }}
  script_env:
  # Search acronyms on https://en.wikichip.org/ to enable optimizations
  # for each platform for desktop chips released since 2012 (10 years)
  # Build options here: https://github.com/kokkos/kokkos/blob/master/BUILD.md
  # FIXME: Cannot optimize for multiple CPU archs simultaneously. For now, don't enable any optimizations.
  #  - Kokkos_OPT_ARGS=-DKokkos_ARCH_AMDAVX=ON -DKokkos_ARCH_BDW=ON -DKokkos_ARCH_HSW=ON -DKokkos_ARCH_SNB=ON -DKokkos_ARCH_ZEN=ON -DKokkos_ARCH_ZEN2=ON -DKokkos_ARCH_ZEN3=ON  # [x86_64 and not osx]
  #  - Kokkos_OPT_ARGS=-DKokkos_ARCH_POWER8=ON -DKokkos_ARCH_POWER9=ON  # [ppc64le]
  #  - Kokkos_OPT_ARGS=-DKokkos_ARCH_ARMV80=ON -DKokkos_ARCH_ARMV81=ON  # [aarch64]
  # Kokkos only lets us target for one CUDA arch at a time, so target the
  # lowest arch supported by each compiler version and include PTX for later archs
    - Kokkos_CUDA_ARGS=-DKokkos_ENABLE_CUDA=ON    # [cuda_compiler_version != "None"]
    - Kokkos_CUDA_ARGS=-DKokkos_ENABLE_CUDA=OFF   # [cuda_compiler_version == "None"]
{% if cuda_major == 11 %}
    - Kokkos_OPT_ARGS=-DKokkos_ARCH_KEPLER35=ON
{% endif %}
{% if cuda_major == 12 %}
    - Kokkos_OPT_ARGS=-DKokkos_ARCH_MAXWELL50=ON
{% endif %}
    - Kokkos_TEST_ARGS=-DKokkos_ENABLE_TESTS=OFF

requirements:
  build:
    - cmake >=3.21.1,<4
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
    - llvm-openmp  # [osx]
    - libgomp      # [linux]
    - ninja
  host:
  # Will get nvcc linker warnings if the cudatoolkit version doesn't match
    - cuda-version {{ environ.get("cuda_compiler_version") }}.*  # [cuda_compiler_version != "None"]
{% if cuda_major == 11 %}
    - cudatoolkit {{ environ.get("cuda_compiler_version") }}.*
{% endif %}
{% if cuda_major == 12 %}
    - cuda-cudart-dev
    - cuda-driver-dev
{% endif %}
  run:
    - __cuda  # [cuda_compiler_version != "None"]
    - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default("10.13") }}  # [osx and x86_64]

test:
  source_files:
    - example/build_cmake_installed
  requires:
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
    - {{ compiler('fortran') }}
    - cmake =3.27.*
    - ninja
  # Will get nvcc linker warnings if the cudatoolkit version doesn't match
    - cuda-version {{ environ.get("cuda_compiler_version") }}.*  # [cuda_compiler_version != "None"]
{% if cuda_major == 11 %}
    - cudatoolkit {{ environ.get("cuda_compiler_version") }}.*
{% endif %}
{% if cuda_major == 12 %}
    - cuda-cudart-dev
    - cuda-driver-dev
{% endif %}
  commands:
  # Lots more CMake files; just checking for one
    - test -f $PREFIX/lib/cmake/Kokkos/KokkosConfig.cmake  # [unix]
    - if not exist %LIBRARY_LIB%\\cmake\\Kokkos\\KokkosConfig.cmake  # [win]
  # Testing explicity for all shared libs, but not links
    - test -f $PREFIX/lib/libkokkoscontainers.so.{{ so_version }}  # [linux]
    - test -f $PREFIX/lib/libkokkoscore.so.{{ so_version }}  # [linux]
    - test -f $PREFIX/lib/libkokkossimd.so.{{ so_version }}  # [linux]
    - test -f $PREFIX/lib/libkokkoscontainers.{{ so_version }}.dylib  # [osx]
    - test -f $PREFIX/lib/libkokkoscore.{{ so_version }}.dylib  # [osx]
    - test -f $PREFIX/lib/libkokkossimd.{{ so_version }}.dylib  # [osx]
    - if not exist %LIBRARY_LIB%\\libkokkoscontainers.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%\\libkokkoscore.lib exit 1  # [win]
  # There are lots more headers; only test for a few.
  # Dumps many headers directly into include/,
  # but all files are prefixed with Kokkos_
    - test -f $PREFIX/include/Kokkos_Core.hpp  # [unix]
    - if not exist %LIBRARY_INC%\\Kokkos_Core.hpp  # [win]
  # These are all the binaries
    - test -f $PREFIX/bin/hpcbind  # [unix]
    - test -f $PREFIX/bin/kokkos_launch_compiler  # [unix]
    - test -f $PREFIX/bin/nvcc_wrapper  # [unix]
    - if not exist %LIBRARY_BIN%\\hpcbind  # [win]
    - if not exist %LIBRARY_BIN%\\kokkos_launch_compiler  # [win]
    - if not exist %LIBRARY_BIN%\\nvcc_wrapper  # [win]
  # Test compilation with kokkos
    - cd example/build_cmake_installed
    # Prevent error during configuration due to CUDA::cudart not found
    - echo -e "find_package(CUDAToolkit REQUIRED COMPONENTS cudart cuda_driver)\n$(cat CMakeLists.txt)" > CMakeLists.txt  # [cuda_compiler_version != "None"]
    - cmake -GNinja ${CMAKE_ARGS} .
    - cmake --build .
    - ./example --help  # [cuda_compiler_version == "None"]

about:
  home: https://kokkos.org/
  summary: >
    Kokkos C++ Performance Portability Programming EcoSystem: The Programming Model - Parallel Execution and Memory Abstraction
  description: >
    Kokkos Core implements a programming model in C++ for writing performance portable applications targeting all major HPC platforms. For that purpose it provides abstractions for both parallel execution of code and data management. Kokkos is designed to target complex node architectures with N-level memory hierarchies
    and multiple types of execution resources. It currently can use CUDA, HIP, SYCL, HPX, OpenMP and C++ threads as backend programming models with several other backends in development.
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  doc_url: https://github.com/kokkos/kokkos/wiki
  dev_url: https://github.com/kokkos/kokkos

extra:
  recipe-maintainers:
    - vincentmr
    - BastianZim
    - carterbox
