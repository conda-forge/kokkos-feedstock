{% set name = "kokkos" %}
{% set version = "4.6.02" %}
{% set so_version = version.split(".") | map("int") | join(".") %}

{% set cuda_major = environ.get("cuda_compiler_version", "0.0").split(".")[0]|int %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/kokkos/kokkos/archive/refs/tags/{{ version }}.tar.gz
  sha256: a4e6a39f34a0ffec8de0b23959a9866721363b581adb60554263bcfc15a10734

build:
  number: 1
  string: "cuda{{ cuda_major }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}"  # [cuda_compiler_version != "None"]
  string: "h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}"  # [cuda_compiler_version == "None"]
  run_exports:
    - {{ pin_subpackage('kokkos') }}
  script_env:
  # Search acronyms on https://en.wikichip.org/ to enable optimizations
  # for each platform for desktop chips released since 2012 (10 years)
  # Build options here: https://github.com/kokkos/kokkos/blob/master/BUILD.md
  # FIXME: Cannot optimize for multiple CPU archs simultaneously. For now, don't enable any optimizations.
  #  - Kokkos_OPT_ARGS=-DKokkos_ARCH_AMDAVX=ON -DKokkos_ARCH_BDW=ON -DKokkos_ARCH_HSW=ON -DKokkos_ARCH_SNB=ON -DKokkos_ARCH_ZEN=ON -DKokkos_ARCH_ZEN2=ON -DKokkos_ARCH_ZEN3=ON  # [x86_64 and not osx]
  #  - Kokkos_OPT_ARGS=-DKokkos_ARCH_POWER8=ON -DKokkos_ARCH_POWER9=ON  # [ppc64le]
  #  - Kokkos_OPT_ARGS=-DKokkos_ARCH_ARMV80=ON -DKokkos_ARCH_ARMV81=ON  # [aarch64]
  # Kokkos only lets us target for one CUDA arch at a time, so target the
  # lowest arch supported by each compiler version and include PTX for later archs
    - Kokkos_CUDA_ARGS=-DKokkos_ENABLE_CUDA=ON   # [cuda_compiler_version != "None"]
    - Kokkos_CUDA_ARGS=-DKokkos_ENABLE_CUDA=OFF  # [cuda_compiler_version == "None"]
{% if cuda_major == 11 %}
    - Kokkos_OPT_ARGS=-DKokkos_ARCH_PASCAL60=ON
{% endif %}
{% if cuda_major == 12 %}
    - Kokkos_OPT_ARGS=-DKokkos_ARCH_AMPERE80=ON
{% endif %}
    - Kokkos_TEST_ARGS=-DKokkos_ENABLE_TESTS=OFF

requirements:
  build:
    - cmake >=3.21.1,<4
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
    - {{ stdlib("c") }}
    - llvm-openmp  # [osx]
    - libgomp      # [linux]
    - ninja
  host:
  # Will get nvcc linker warnings if the cudatoolkit version doesn't match
    - cuda-version {{ environ.get("cuda_compiler_version") }}.*  # [cuda_compiler_version != "None"]
{% if cuda_major == 11 %}
    - cudatoolkit {{ environ.get("cuda_compiler_version") }}.*
{% endif %}
{% if cuda_major == 12 %}
    - cuda-cudart-dev
    - cuda-driver-dev   # [not win]
{% endif %}
  run:
    - __cuda  # [cuda_compiler_version != "None"]

test:
  source_files:
    - example/build_cmake_installed
  requires:
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
    - {{ compiler('fortran') }}
    - cmake =3.27.*
    - ninja
  # Will get nvcc linker warnings if the cudatoolkit version doesn't match
    - cuda-version {{ environ.get("cuda_compiler_version") }}.*  # [cuda_compiler_version != "None"]
{% if cuda_major == 11 %}
    - cudatoolkit {{ environ.get("cuda_compiler_version") }}.*
{% endif %}
{% if cuda_major == 12 %}
    - cuda-cudart-dev
    - cuda-driver-dev   # [not win]
{% endif %}
  commands:
  # Lots more CMake files; just checking for one
    - test -f $PREFIX/lib/cmake/Kokkos/KokkosConfig.cmake  # [unix]
    - if not exist %LIBRARY_LIB%\\cmake\\Kokkos\\KokkosConfig.cmake exit 1  # [win]
  # Testing explicitly for all shared libs, but not links
  # linux
    - test -f $PREFIX/lib/libkokkoscontainers.so.{{ so_version }}  # [linux]
    - test -f $PREFIX/lib/libkokkoscore.so.{{ so_version }}  # [linux]
    - test -f $PREFIX/lib/libkokkossimd.so.{{ so_version }}  # [linux]
  # osX
    - test -f $PREFIX/lib/libkokkoscontainers.{{ so_version }}.dylib  # [osx]
    - test -f $PREFIX/lib/libkokkoscore.{{ so_version }}.dylib  # [osx]
    - test -f $PREFIX/lib/libkokkossimd.{{ so_version }}.dylib  # [osx]
  # windows
    - if not exist %LIBRARY_LIB%\\kokkoscontainers.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%\\kokkoscore.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%\\kokkossimd.lib exit 1  # [win]
    - if not exist %LIBRARY_BIN%\\kokkoscontainers.dll exit 1  # [win]
    - if not exist %LIBRARY_BIN%\\kokkoscore.dll exit 1  # [win]
    - if not exist %LIBRARY_BIN%\\kokkossimd.dll exit 1  # [win]
  # There are lots more headers; only test for a few.
  # Dumps many headers directly into include/,
  # but all files are prefixed with Kokkos_
    - test -f $PREFIX/include/Kokkos_Core.hpp  # [unix]
    - if not exist %LIBRARY_INC%\\Kokkos_Core.hpp exit 1  # [win]
  # These are all the binaries
    - test -f $PREFIX/bin/hpcbind  # [unix]
    - test -f $PREFIX/bin/kokkos_launch_compiler  # [unix]
    - if not exist %LIBRARY_BIN%\\hpcbind exit 1  # [win]
    - if not exist %LIBRARY_BIN%\\kokkos_launch_compiler exit 1  # [win]
    - test -f $PREFIX/bin/nvcc_wrapper  # [cuda_compiler_version != "None" and unix]
    - if not exist %LIBRARY_BIN%\\nvcc_wrapper exit 1  # [cuda_compiler_version != "None" and win]
  # Test compilation with kokkos
    - cd example/build_cmake_installed
    # Prevent error during configuration due to CUDA::cudart not found
    - echo -e "find_package(CUDAToolkit REQUIRED COMPONENTS cudart cuda_driver)\n$(cat CMakeLists.txt)" > CMakeLists.txt  # [cuda_compiler_version != "None" and unix]
    # for the moment the compilation on windows block the runner
    - cmake -GNinja ${CMAKE_ARGS} -DCMAKE_BUILD_TYPE=Release  .  # [cuda_compiler_version == "None" and (linux or win) ]
    - cmake --build .  # [cuda_compiler_version == "None" and (linux or win)]
    - ./example 1000 --help  # [cuda_compiler_version == "None" and linux]
    - example 1000 --help  # [cuda_compiler_version == "None" and win]

about:
  home: https://kokkos.org/
  summary: >
    Kokkos C++ Performance Portability Programming EcoSystem: The Programming Model - Parallel Execution and Memory Abstraction
  description: >
    Kokkos Core implements a programming model in C++ for writing performance portable applications targeting all major HPC platforms. For that purpose it provides abstractions for both parallel execution of code and data management. Kokkos is designed to target complex node architectures with N-level memory hierarchies
    and multiple types of execution resources. It currently can use CUDA, HIP, SYCL, HPX, OpenMP and C++ threads as backend programming models with several other backends in development.
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  doc_url: https://github.com/kokkos/kokkos/wiki
  dev_url: https://github.com/kokkos/kokkos

extra:
  recipe-maintainers:
    - vincentmr
    - BastianZim
    - carterbox
    - fbordeu
